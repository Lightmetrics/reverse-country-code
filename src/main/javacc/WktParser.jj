options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN( WktParser )
    package com.github.countrycode.reverse;

    import java.util.ArrayList;
    import java.util.List;

    class WktParser {
    }
PARSER_END( WktParser )

SKIP: { " " | "\t" | "\n" | "\r" }
TOKEN: { < REAL: ("-")? (["0"-"9"])+ ("." (["0"-"9"])*)? > }

Geometry parse():
{
    Geometry geo;
}
{
    ( "MULTIPOLYGON" geo = multiPolygon() | "POLYGON" geo = polygon() )
    <EOF>
    {
        return geo;
    }
}

MultiPolygon multiPolygon():
{
    List<Polygon> polys = new ArrayList<Polygon>();
}
{
    "(" { polys.add(polygon()); } ( "," { polys.add(polygon()); } )* ")"
    {
        return new MultiPolygon(polys);
    }
}

Polygon polygon():
{
    List<Point> ring;
    List<Polygon> holes = new ArrayList<Polygon>();
}
{
    "(" ring = ring() ( "," { holes.add(new Polygon(ring())); } )* ")"
    {
        return new Polygon(ring, holes);
    }
}

List<Point> ring():
{
    List<Point> coordinates = new ArrayList<Point>();
}
{
    "(" { coordinates.add(point()); } ( "," { coordinates.add(point()); } )* ")"
    {
        return coordinates;
    }
}

Point point():
{
    Double lat, lon;
}
{
    lon = real() lat = real()
    {
        return new Point(lat, lon);
    }
}

Double real():
{
    Token t;
}
{
    t = <REAL>
    {
        return Double.valueOf(t.image);
    }
}
